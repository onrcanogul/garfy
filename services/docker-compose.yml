networks:
  my-network:
    driver: bridge

services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: dev-mem
    command: start-dev
    ports:
      - "8070:8080"
    networks:
      - my-network

  gateway:
    image: garfy/api-gateway
    container_name: api-gateway
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=default
    depends_on:
      blog-api:
        condition: service_healthy
      social-media-api:
        condition: service_healthy
      profile-api:
        condition: service_healthy
    networks:
      - my-network

  blog-db:
    image: mysql:8
    container_name: blog-db
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: Password12*
      MYSQL_DATABASE: blog-db
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - my-network

  blog-api:
    image: garfy/blog
    container_name: blog-api
    ports:
      - "8090:8090"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_DATASOURCE_URL: jdbc:mysql://blog-db:3306/blog-db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Password12*
    depends_on:
      blog-db:
        condition: service_healthy
    networks:
      - my-network

  social-media-api:
    image: garfy/socialmedia
    container_name: social-media-api
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      SPRING_PROFILES_ACTIVE: default
      SPRING_DATASOURCE_URL: jdbc:postgresql://social-media-db:5432/social-media-db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    depends_on:
      social-media-db:
        condition: service_healthy
    networks:
      - my-network

  social-media-db:
    image: postgres:latest
    container_name: social-media-db
    restart: always
    environment:
      POSTGRES_DB: social-media-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d social-media-db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  profile-api:
    build:
      context: ./profile-api
      dockerfile: Dockerfile
    container_name: profile-api
    restart: always
    ports:
      - "9040:8080"
    depends_on:
      redis:
        condition: service_healthy
      profile-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://profile-api:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    command: ["sh", "-c", "dotnet ef database update && dotnet profile-api.dll"]
    environment:
      - ConnectionStrings__DefaultConnection:Host=profile-db;Port=5432;Database=profile-db;Username=postgres;Password=password
      - Redis__Host=redis
      - Redis__Port=6379
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      - my-network

  redis:
    image: redis:latest
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  profile-db:
    image: postgres:latest
    container_name: profile-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: profile-db
    ports:
      - "5433:5432"
    networks:
      - my-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d profile-db" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

